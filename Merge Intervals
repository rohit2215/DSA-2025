class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        // Step 1: Sort the intervals based on the starting value
        sort(intervals.begin(), intervals.end());

        vector<vector<int>> merged; // Stores the merged intervals

        // Step 2: Iterate through each interval
        for (auto& interval : intervals) {
            // If merged list is empty OR no overlap, add the interval
            if (merged.empty() || merged.back()[1] < interval[0]) {
                merged.push_back(interval);
            } else {
                // Overlapping intervals: Merge by updating the last interval's end time
                merged.back()[1] = max(merged.back()[1], interval[1]);
            }
        }

        return merged; // Return the list of merged intervals
    }
};
